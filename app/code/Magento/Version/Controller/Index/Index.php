<?php
/**
 *
 * Copyright Â© Magento, Inc. All rights reserved.
 * See COPYING.txt for license details.
 */
declare(strict_types=1);

namespace Magento\Version\Controller\Index;

use Magento\Framework\App\Action\Action;
use Magento\Framework\App\Action\Context;
use Magento\Framework\App\Action\HttpGetActionInterface as HttpGetActionInterface;
use Magento\Framework\App\ProductMetadataInterface;

/**
 * Magento Version controller
 */
class Index extends Action implements HttpGetActionInterface
{
    const DEV_PREFIX = 'dev-';

    /**
     * @var ProductMetadataInterface
     */
    protected $productMetadata;

    /**
     * @param Context $context
     * @param ProductMetadataInterface $productMetadata
     */
    public function __construct(Context $context, ProductMetadataInterface $productMetadata)
    {
        $this->productMetadata = $productMetadata;
        parent::__construct($context);
    }

    /**
     * Sets the response body to ProductName/Major.MinorVersion (Edition).
     *
     * @return void
     */
    public function execute(): void
    {
        $version = $this->productMetadata->getVersion();
        $versionParts = explode('.', $version);
        if ($this->isGitBasedInstallation($version) || !$this->isCorrectVersion($versionParts)) {
            return;
        }

        $this->getResponse()->setBody(
            $this->productMetadata->getName() . '/' .
            $this->getMajorMinorVersion($versionParts) .
            ' (' . $this->productMetadata->getEdition() . ')'
        );
    }

    /**
     * Check if provided version is generated by Git-based Magento instance.
     *
     * @param string $fullVersion
     * @return bool
     */
    private function isGitBasedInstallation($fullVersion): bool
    {
        return 0 === strpos($fullVersion, self::DEV_PREFIX);
    }

    /**
     * Verifies if the Magento version is correct
     *
     * @param array $versionParts
     * @return bool
     */
    private function isCorrectVersion(array $versionParts): bool
    {
        return isset($versionParts[0]) && isset($versionParts[1]);
    }

    /**
     * Returns string only with Major and Minor version number
     *
     * @param array $versionParts
     * @return string
     */
    private function getMajorMinorVersion(array $versionParts): string
    {
        return $versionParts[0] . '.' . $versionParts[1];
    }
}
